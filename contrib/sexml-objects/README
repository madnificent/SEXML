
SEXML-OBJECTS

sexml-objects is an extention to the sexml package that adds CLOS classe support
for the tags defined in the DTD that sexml uses for generating its renderer 
functions. In other words: if you had a function called div that rendered the 
markup for a html div, you can now have that function and a class that 
represents the div tag and all its attributes that can be used to generate the
markup for the div.

--------------------------------------------------------------------------------

HOW TO USE

SEXML-OBJECTS> 
(setup-sexml-objects (asdf:system-relative-pathname :sexml "html5.dtd") :< nil)

(this might take a while and generate some style-warnings)

the first argument is the path to dtd to use, second is the target
package, the third is a list containing any class that you want the
generated classes to be inherited from or nil if you want only the
defautls. the classes that you want to inherit from must have a
:metaclass of attributes-class. see the readme for cl-attribs for more
info.

note that we define what package to put all the functions and classes in.
in this case we tell sexml to put the generated stuff in the "<" package.
this is to keep your working package clean and prevent conflicts with other
things you might have defined yourself, or imported from other packages.

--------------------------------------------------------------------------------

OK NOW WHAT?

now lets try and use what we created:

SEXML-OBJECTS> 
(defparameter obj (make-instance '<:div :id "my new div" 
	       	 		 :%children
				 (list
				 "this is a literal text that is put inside the 
				 parent div"
				 (make-instance '<:br)
				 (make-instance '<:input :type "button" 
				 			 :value "press me!"))))
OBJ

now we have an object we can use to render markup for the div and any children
inside it.

SEXML-OBJECTS> (render-markup obj)
"<div id=\"my new div\">this is a literal text that is put inside the 
				 parent div<br/><input type=\"button\"
				 value=\"press me!\"/></div>"

note that you can add functions as children, this will give you the
results of the function to be rendered in the markup.


DEFINE-UI

if you want your code look more like html markup and easy to
read/type, you can use a macro called define-ui like this:

SEXML-OBJECTS> (define-ui () (<:div :id "my id"
			     	    (table 
				     (tr
				      (td "my content")))))
#<<:DIV {CE19EB1}>

this will expand to:

(PROGN
 (MAKE-INSTANCE '<:DIV :ID "my id" :%CHILDREN
                (LIST
                 (MAKE-INSTANCE '<:TABLE :%CHILDREN
                                (LIST
                                 (MAKE-INSTANCE '<:TR :%CHILDREN
                                                (LIST
                                                 (MAKE-INSTANCE '<:TD
                                                                :%CHILDREN
                                                                (LIST
                                                                 "my content")))))))))

this is really useful if you are going to make a long markup as it
will reduce the code to type and improves readablity alot, as ther is
no need to type extra make-instance, list and :%children anymore.

note: define-ui has an optional arg called package, defaulting to < if
supplied, define-ui will check the given package and current package
for the classes that inherit from widget class. if it finds the class
symbol in the current package or the given package and it inherits
from widget class, it will convert the form.

DEFINE-TEMPLATE

sometimes you need to reuse some piece of markup many times, for this
reason you may use define-template like this to create a function that
will give you the desired markup, define-template also has the
optional package arg like define-ui. if you dont supply a template
name, you will only get a lambda that will generate the widget-tree
and you wont be able to call get-template for that template:

SEXML-OBJECTS> 
(define-template (test-header)
  (<:tr
   (<:th "Select")
   (<:th "Name")
   (<:th "A")
   (<:th "B")
   (<:th "C")
   (<:th "D")
   (<:th "Edit")))
#<FUNCTION (LAMBDA ()) {E6A8D7D}>

SEXML-OBJECTS> (get-template 'test-header)
#<FUNCTION (LAMBDA ()) {E6A8D7D}>
T

SEXML-OBJECTS> (funcall (get-template 'test-header))
#<<:TR {CCE0721}>

SEXML-OBJECTS> (render-markup *)
"<tr><th>Select</th><th>Name</th><th>A</th><th>B</th><th>C</th><th>D</th><th>Edit</th></tr>"

DEFINE-TEMPLATE-FROM-FILE

You can use a html file to define templates and use them later like
this: lets say I have a login-page.html file on my desktop that has
this markup inside it:

<html><head>
</head>
<body>
<p> 
  welcome <# (format nil " ~a " *username*) #> please login to continue!
</p>
<table>
  <tbody>
    <tr>
      <td>username:<br />
      </td>
      <td><input name="username" /><br />
      </td>
    </tr>
    <tr>
      <td>password:<br />
      </td>
      <td><input name="password" /><br />
      </td>
    </tr>
    <tr>
      <td><input value="Login" name="Login" type="submit" /><br />
      </td>
    </tr>
  </tbody>
</table>
</body></html>

note: you can use <# and #> to insert inline lisp froms where you
want. just dont try something like this: <p id=<# (some lisp form) #>
/> instead do this: <p <#:id (some lisp form) #> />

notes about templates:
 * can contain your own widgets if you have defined any
 * can only have one root element
 * please make sure you close every tag properly i.e not <br> but <br/>
 * the parser will ignore comments

now we can make a template out of this:

SEXML-OBJECTS> (defparameter *username* "Farzad Bekran")
*USERNAME* ;; this is used to greet the user in the template

SEXML-OBJECTS> (setf *parser-remove-white-space* nil)
NIL ;; dont remove white space so we can read the generated markup

SEXML-OBJECTS> (define-template-from-file (login-page-template "~/Desktop/login-page.html"))
#<FUNCTION (LAMBDA ()) {EC4E1A5}>

;; now we can use this template to generate markup
SEXML-OBJECTS> (render-markup (funcall (get-template 'login-page-template)))
"<html class=\"STD-HTML\" id=\"HTML-10\"><head class=\"STD-HEAD\" id=\"HEAD-11\"></head>
<body class=\"STD-BODY\" id=\"BODY-10\"><p class=\"STD-P\" id=\"P-30\">welcome  Farzad Bekran  please login to continue!
</p>
<table class=\"STD-TABLE\" id=\"TABLE-6\"><tbody class=\"STD-TBODY\" id=\"TBODY-6\"><tr class=\"STD-TR\" id=\"TR-20\"><td class=\"STD-TD\" id=\"TD-30\">username:<br class=\"STD-BR\" id=\"BR-52\"/>
      </td>
      <td class=\"STD-TD\" id=\"TD-31\"><input class=\"STD-INPUT\" id=\"INPUT-16\" name=\"username\"/><br class=\"STD-BR\" id=\"BR-53\"/>
      </td>
    </tr>
    <tr class=\"STD-TR\" id=\"TR-21\"><td class=\"STD-TD\" id=\"TD-32\">password:<br class=\"STD-BR\" id=\"BR-54\"/>
      </td>
      <td class=\"STD-TD\" id=\"TD-33\"><input class=\"STD-INPUT\" id=\"INPUT-17\" name=\"password\"/><br class=\"STD-BR\" id=\"BR-55\"/>
      </td>
    </tr>
    <tr class=\"STD-TR\" id=\"TR-22\"><td class=\"STD-TD\" id=\"TD-34\"><input class=\"STD-INPUT\" id=\"INPUT-18\" name=\"Login\" type=\"submit\" value=\"Login\"/><br class=\"STD-BR\" id=\"BR-56\"/>
      </td>
    </tr>
  </tbody>
</table>
</body></html>"

--------------------------------------------------------------------------------

WHAT ELSE?

%ID
every object created with sexml-objects is automatically given a numbered id:

SEXML-OBJECTS> (%id obj)
"DIV-4"

note that id and %id are two different slots, %id is the one defined and used by
sexml-objects itself, but id is the attribute that is defined from DTD for
markup rendering.


%CHILDREN
any child inside an object must be in a list in the %children slot of the object.

SEXML-OBJECTS> (%children obj)
("this is a literal text that is put inside the 
				 parent div"
 #<<:BR {F0F32C1}> #<<:INPUT {F0F32D1}>)


WIDGETP
widget predicate

SEXML-OBJECTS> (widgetp obj)
T


MAP-WIDGET
maps the given function to the widget tree returns non nil values. that is every 
child of the given widget and the children of the children...

SEXML-OBJECTS> (map-widget obj
			   (lambda (o)
			     (if (widgetp o)(%id o))))
("INPUT-1" "BR-1")


GET-HTML-ATTRIBUTES
returns a plist containing any attributes defined for the object that has non nil 
value, with the keyword used to render it.

SEXML-OBJECTS> (get-html-attributes obj)
(:ID "my new div")


ADD-CHILD
adds the given child to the children list of the given object. accepts optional
index and from-end values.

SEXML-OBJECTS> (defparameter obj2 (make-instance '<:div))
OBJ2
SEXML-OBJECTS> (add-child obj obj2)
("this is a literal text that is put inside the 
				 parent div"
 #<<:BR {F0F32C1}> #<<:INPUT {F0F32D1}> #<<:DIV {D08C421}>)



%PARENT
every object has a parent slot. if the object is inside another objects children
list its %parent slot will be set to the parent object. or nil if its not inside
any other object.

SEXML-OBJECTS> (%parent obj2)
#<<:DIV {F0A2991}>


REMOVE-CHILD
removes the given child or the child at the given index from beginning or the
end of the child list. 

SEXML-OBJECTS> (remove-child obj obj2)
("this is a literal text that is put inside the 
				 parent div"
 #<<:BR {F0F32C1}> #<<:INPUT {F0F32D1}>)

--------------------------------------------------------------------------------

ADVANCED STUFF

there are a few things you might wanna modify for your own need to get the most
out of sexml-objects.

%render-func
this is a slot that the function refrenced by its value is used to get the 
markup for the object and its children. the default is the function tha sexml
creates automatically.

render-murkup
this is a generic method so you can specialize it or define :bfore :after methods
for it. i will be called when we want to generate markup for a given object.

for example:
this is the way i make a special check-box that manages its own label with the 
value given in its %label slot

(defclass check-box (<:input)
  ((<::type    :reader   get-type    :writer  set-type :initarg  :type 
  	       :initform   "checkbox")
   (%label     :accessor %label      :initarg :%label  :initform ""))
  (:metaclass attributes-class))

(defmethod render-markup ((check-box check-box))
  (concatenate 'string
	       (call-next-method)
	       (render-markup 
	         (make-instance '<:label :for (get-id check-box)
		 		:%id (concatenate 'string (%id check-box) "-LABEL")
				:%children (%label check-box)))))

things to note about this:

i redefine type slot to have a initform of "checkbox" so that i wont
need to give it on the make-instance form. as the symbol is internal
inside the "<" package i use <::type for redefining it.

:metaclass should be attributes-class as for any sexml-objects class

then i specialize the render-markup to include the markup for the label.

check-box should have an id for the label to work.

usage:

SEXML-OBJECTS> (make-instance 'check-box :%label "test label" :id "cb")
#<CHECK-BOX {CDE2D11}>
SEXML-OBJECTS> (render-markup *)
"<input id=\"cb\" type=\"checkbox\"/><label for=\"cb\">test label</label>"


ANOTHER EXAMPLE FOR EXTENDING THE DEFAULT BEHAVIOUR:

note that you can extend the behaviour of the objects by inheriting
from the default classes. for example:

(defclass xdiv (<:div)
  ((%id :accessor %id :initarg :%id :initform nil 
  	:attributes (:set-as-html-id-p t)))
  (:metaclass attributes-class))

(defmethod initialize-instance :after ((obj xdiv) &rest initargs)
    (declare (ignore initargs))
    (if (slot-attrib obj '%id :set-as-html-id-p)
	(set-id (%id obj) obj)))

what this code does is that whenever you create an xdiv object, it
will check the ':set-as-html-id-p' 'slot-attrib' of the objects, and
if the value is t then it will set the objects id value to the same
value as %id that was generated by the sexml-objects. so if the object
has an %id of "DIV-4" its rendered markup will be: <div
id="DIV-4"></div>

the :metaclass of the classes created with sexml-objects is
'attributes-class'. for more info about the attributes-class see the
readme file in the cl-attribs directory.
--------------------------------------------------------------------------------

Contact Info

If u find bugs or have any ideas about making sexml-objects better
please contact me at:

farzadbekran@gmail.com

--------------------------------------------------------------------------------

Copyright (c) 2012 Farzad Bekran


Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.

IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
